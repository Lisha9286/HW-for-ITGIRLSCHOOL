1. Приведите примеры GET-вызовов с параметрами (2-3 возможных адреса URL, можно реальных, можно из головы)?
    
    https://www.asos.com/search/?q=midi+dress- выбирает одежду категории платья длина миди
    
    
    https://www.ozon.ru/category/velosipedy-ekipirovka-i-zapchasti-11001/?delivery=2- выбирает товары для велоспорта со сроком доставки 2 дня

2. Расскажите своими словами, чем отличаются GET и POST-запросы?

   в POST запросах можно передавать конфиденциальные данные (не сохраняются в истории браузера, не кэшеруется и не могут быть закладками, данные отправляются внутри HTTP) и отправлять большее колличнство данных, чем  в GET. 

   с помомощью GET лучше не отправлять конфиденциальные данные (сохраняются в истории браузера, могут кэшероваться и могут быть закладками, данные отправляются в строке адреса имя-значение), можно отправить меньшн данных, чем с помощью POST метода

3. Какой вид запроса лучше использовать для получения отфильтрованного списка товаров? 
   GET

4. А какой - для формы регистрации? 
   POST

5. Посмотрите на запрос и разберитесь, что он делает и что означают и на что влияют параметры 
api_key, q, limit, lang? Как сделать так, чтобы запрос возвращал не 25, а 5 картинок? 
    
    https://api.giphy.com/v1/gifs/search?api_key=SET_KEY_HERE&q=cats&limit=5&offset=0&rating=g&lang=en
    api_key - ключ для использования API
    q - "раздел поиска"
    limit - ограничение колличества объектов
    lang - язык
    
    
6. Как посмотреть заголовки запроса к странице или API?
   вкладка Network

7. Самостоятельно разберитесь, что такое CORS. Приведите пример их включения в запросе `fetch`.
   Cross-Origin Resource Sharing («совместное использование ресурсов между разными источниками»).
   fetch('https://cors-demo.glitch.me/allow-cors', {mode:'cors'})

8. Что можно писать в параметре заголовков `Content-Type` ?
   Данное поле включает в себя идентификаторы типа и подтипа, а также может содержать некоторую вспомогательную информацию, которая может потребоваться для конкретного типа данных. После идентификаторов типа и подтипа оставшаяся часть поля - просто набор парамеров, заданных в порядке "атрибут/значение". Набор параметров зависит от типа данных. (В частности, не может быть глобально-значимых параметров, справедливых сразу для всех типов содержимого тела письма. Очередность параметров значения не имеет. В числе определенных параметров - "charset", декларирующий символьный набор (кодировку, кодовую страницу - это все синонимы) тела письма. Комментарии допускаются.

9. Давайте отправим информацию о собачке в API по адресу `localhost/pets/add` 
    
    ```json
    JSON с информацией о собаке:
    {
    		"breed": "Beagle",
    		"size": "large",
    		"color": "orange",
    		"age": 6
    	}
    ```
    
    Как будет выглядеть `fetch` в таком случае?

const url = 'localhost/pets/add';
const dog = { "breed": "Beagle",
    		      "size": "large",
    		      "color": "orange",
    		      "age": 6 };

    let response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json;charset=utf-8'
    }
    body: JSON.stringify(dog)
  });

let result = await response.json();
alert(result.message);
    
10. Изучите статью [https://learn.javascript.ru/promise-basics] и самостоятельно разберитесь, что такое промисы. Напишите в 1-2 предложения, что это такое и приведите пример, где вы уже сталкивались с промисами?