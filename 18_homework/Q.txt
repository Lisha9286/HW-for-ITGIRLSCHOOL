1. Чем отличаются куки, localStorage и sessionStorage? 

   1 куки
   -Хранит данные, которые можно передавать на сервер через заголовки.
   - Локальное и сессионное хранилище доступны только на клиентской стороне, а cookie можно передавать на сервер.
   - Срок хранения устанавливается при создании cookie.
   - Объём данных не превышает 4 Кбайт.
   - Cookie могут быть защищёнными, в этом случае их содержимое нельзя получить на стороне клиента.
   
   2 Local Storage
   
   - Хранит данные бессрочно.
   - Очищается только с помощью JavaScript или очистки кэша браузера.
   - Хранит данные объёмом до 5 МБ.
   - Не поддерживается старыми браузерами, например, IE 7 и ниже.
   
   3 Session Storage
   - Хранит данные, пока продолжается текущая сессия. Когда пользователь закрывает браузер, данные становятся недоступными.
   - Используется контекст браузера верхнего уровня, поэтому каждая вкладка браузера хранит уникальные данные.
   - Объём данных больше чем в Cookie.
   - Не поддерживается старыми браузерами, например, IE 7 и ниже.
   
   
Что стоит использовать, если нам нужно надолго сохранить много пользовательских данных?
   - Local Storage
   
2. Как добавить и получить значение из веб-хранилища? 

3. Придумайте еще минимум 3 ситуации помимо предложенных в уроке, для чего может быть нужно сохранять данные пользователя и какие? 
    - выбранная тема сайта
	- способ оплаты
	- избранные товары
    
4. Как сделать валидацию номера кредитной карты? 

/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/

American Express: - Начиная с 34 или 37, длина 15 цифр.
VISA: - Начиная с 4, длиной 13 или 16 цифр.
MasterCard: - Начиная с 51 по 55, длина 16 цифр.
UnionPay: - Начиная с 67, длина 16-19 цифр.
МИР: - Начиная с 2200–2204, длина 16-19 цифр.

Алгоритм Луна
1. Начиная с первой цифры последовательности слева и через одну цифру (то есть позиции 1, 3, 5, 7, 9, …) в случае, если количество цифр в последовательности нечетное (как в этом примере, где оно равно 15, 16-я — контрольная), если же количество цифр четное, тогда, начиная со второй цифры последовательности через одну цифру (то есть позиции 2, 4, 6, 8, …), делается проверка: если 2·x > 9, то из произведения вычитается 9, иначе произведение 2·x оставляем без изменения, где x — текущая цифра.

например:

4  5  6  1     2  6  1  2     1  2  3  4     5  4  6  4
8     12       4     2        2     6        10    12
8     3        4     2        2     6        1     3
2. Затем все числа, полученные на предыдущем этапе, складываются.

8+5+3+1 + 4+6+2+2 + 2+2+6+4 + 1+4+3+4 = 57
3. Полученная сумма должна быть кратна 10 (то есть равна 40, 50, 60, 70, …). В примере выше исходная последовательность некорректна.

В примере: последняя цифра — контрольная. Для того, чтобы номер был верен в соответствии с алгоритмом Луна, контрольная цифра должна быть равна 7.

4  5  6  1     2  6  1  2     1  2  3  4     5  4  6  7
8     12       4     2        2     6        10    12
8     3        4     2        2     6        1     3
8+5+3+1 + 4+6+2+2 + 2+2+6+4 + 1+4+3+7 = 60
	
5. Как сделать input, который будет принимать только числа (минимум 2 способа)?
    - type number
	- регулярное выражение v/^\d{1,}$/
	
6. Найдите регулярное выражение для ФИО на русском языке
/^(?=.{1,40}$)[а-яёА-ЯЁ]+(?:[-' ][а-яёА-ЯЁ]+)*$/
7. Как должно выглядеть невалидное поле, чтобы пользователю было понятно, что в него вводить? Как показать пользователю, что не так, если ввод некорректен (теги и атрибуты html, псевдоклассы css) ?
    - псевдоклассу :invalid сделать border-color красным
	- использование атрибута required и определить тип инпута
	
8. Какие есть недостатки у стандартного способа задания валидации через HTML5?
   возможно проверять факт наличия валидации и частично корректность