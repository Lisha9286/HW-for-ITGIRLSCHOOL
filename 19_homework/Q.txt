1. Чем отличается класс от объекта? Приведите примеры и того, и другого, отличные от указанных в уроке.

Объект — это набор собранных внутри одной переменной свойств и/или функций. Каждое свойство представляет собой пару имя-значение. 

const book = {
    name: 'Жизнь насекомых',
    author: 'Виктор Пелевин',
    insects: ["Мухи", "Комары", "Жуки-скарабеи", "Муравьи", "Ночные мотыльки", "Конопляные клопы", "Тараканы-Цикады"],
}

Класс — это шаблон, описывающий свойства и методы, которыми будет обладать любой объект, созданный на основе этого класса. 

        class Book {
            constructor(author, name) {
                this.name = name;
                this.author = author;
            }

            adv() {
                alert(`Купите бестселер ${this.name} от автора ${this.author}!`)
            }
        }

        let book1 = new Book('Дмитрий Глуховский', 'Метро 2033')

        book1.adv()

2. Приведите примеры объектно-ориентированного подхода в реальной жизни. 
    - Класс Пациенты клиники (ФИО, номер карточки, возраст, пол, отделение клиники, дата регистрации), 
    ученики школы (ФИО, дата рождения, класс, профиль обучения, дата поступления в школу, год выпуска, домашний адрес, пол, посещаемые факультативы, успеваемость)

    Приведите примеры объектно-ориентированного подхода в программировании. 
    - Класс Зарегистрированные он-лайн участники забега (ФИО, номер участника, дата регистрации, выбранная дистанция, номер телефона)
    - Класс самокаты в приложении кикшеринга (модель, уровень заряда, адрес парковки, номер самоката, дата производства, пробег) 
    
3. Что такое конструктор? Самостоятельно изучите и напишите, какие бывают виды конструкторов.
Конструктор - это специальная функция, задача которой заполнить пустой объект свойствами и методами. Иными словами, конструктор - это функция, которая конфигурирует объект для дальнейшего использования.
Встроенные конструкторы JavaScript:
var x1 = new Object();    // Новый объект Object
var x2 = new String();    // Новый объект String
var x3 = new Number();    // Новый объект Number
var x4 = new Boolean();   // Новый объект Boolean
var x5 = new Array();     // Новый объект Array
var x6 = new RegExp();    // Новый объект RegExp
var x7 = new Function();  // Новый объект Function
var x8 = new Date();      // Новый объект Date 


4. Что выведет код? Почему именно так? 

    пустая строка (вызов функции bike() в которой есть только параметр this.name)
    pomidor (вызов obj1.bike()) в console.log(this.name) подставляется значение name из объекта obj1 - pomidor)
    site (вызов obj.bike()) в console.log(this.name) подставляется значение name из объекта obj2 - site)


5. Чем статические свойства и методы отличаются от нестатических? В каких ситуациях они применяются?

   Cтатически методы и свойства класса не привязаны к конкретному объекту и могут существовать без создания экземпляра и слова new.


6. Самостоятельно изучите, что такое геттеры и сеттеры, приведите пример класса с их использованием.
   Свойства-аксессоры представлены методами: «геттер» – для чтения и «сеттер» – для записи. При литеральном объявлении объекта они обозначаются get и set.

        let day = {
            dayOfWeek: "Monday",
            date: 5,

            get fullDay() {
                return `${this.dayOfWeek} ${this.date}`;
            },

            set fullDay(value) {
                [this.dayOfWeek, this.date] = value.split(" ");
            }
        };

        alert(day.fullDay)

        day.fullDay = "Friday 13"

        alert(day.dayOfWeek);
        alert(day.date)
        alert(day.fullDay)


7. Что выведет код? Почему именно так?
   object 
   оператор "new" создаст новый объект Person, которому равна переменная member


8.  Что выведет код? Почему именно так?
    {name: 'Valera', age: 23}
    при объявлении переменной sity ей присваевается значение person.city, в следующей строке значение переменной перезаписывается на "Amserdam"
    для создания нового свойства и значения объекта person - person.city = "Amsterdam"
