1. Напишите JSON к вашим ответам на вопрос 2 из прошлой недели. Например, если вы ответили Книга (название, автор, год выпуска), то JSON может выглядеть так (минимум 3 примера):
Пациенты клиники (ФИО, номер карточки, возраст, пол, отделение клиники, дата регистрации), 
    ученики школы (ФИО, дата рождения, класс, профиль обучения, год выпуска, пол, посещаемые факультативы, успеваемость)

[{"name": "Трофимов Клемент Владленович",
"age": 4,
"number":787858,
"sex": "male",
"department "pediatric":,
"date": "02.05.2022"
}
{"name": "Лазарева Мериса Фроловна",
"age": 103,
"number": 786783,
"sex": "female",
"department": "cardiology",
"date": "27.03.2022"
}
{"name": "Журавлёв Вальтер Серапионович",
"age": 19,
"number": 524254,
"sex": "male",
"department": "trauma",
"date": "26.08.2017"
}]

[{"name": "Новиков Кондратий Проклович",
"age": 11,
"grade":5,
"sex": "male",
"faculty: "math",
"electives":["math", "programming", "hockey"],
"yearOfGraduation": 2028,
"GPA": 4,3}

{"name": "Яковлева Юлиана Максовна",
"age": 15,
"grade":9,
"sex": "female",
"faculty: "chemistry":,
"electives":["biochemistry", "genetics", "swiming"]
"yearOfGraduation",
"adress": 4,5,
"GPA": 2024}

{"name": "Щербакова Ариадна Эльдаровна",
"age": 13,
"grade":7,
"sex": "female",
"faculty": "physics",
"electives": ["drawing", "astronomy", "chess"],
"yearOfGraduation": 2026,
"adress":,
"GPA": 4
}]

2. Самостоятельно разберитесь, что за формат данных XML и чем он отличается от JSON? Приведите пример, как один и тот же объект собачки с картинки ниже будет выглядеть в JSON и в XML?
В XML данные заключаются в теги как в HTML. Данные можно в ставить вместе с тегами в HTML документ и веб-браузер проигнорирует теги XML и отобразит только данные.

JSON:
{"breed": "Beagle",
"age": "6 years",
"size": "lrge",
"color": "red",
}

XML:
<?xml version="1.0"?>
<DOG>
  <BREED>Beagle</BREED>
  <AGE>6 years</AGE>
  <SIZE>large</SIZE>
  <COLOR>red</COLOR>
</DOG>

Например, если приведенный выше текст в формате XML вставить в HTML-файл и открыть его в браузере, то результаты будут выглядеть следующим образом:

Beagle 6 years large red

Веб-браузер проигнорирует теги XML и отобразит только данные.


3. Что такое сериализация и десериализация (парсинг)? В каких ситуациях они нужны? 
Сеоиализация - превращение объекта JavaScript в строку JSON. Нужна для отправки данных на сервер. Для сериализации объекта javascript в json применяется функция JSON.stringify():
Для обратной операции - десериализации или парсинга json-объекта в javascript применяется метод JSON.parse().
десериализация часто нужна для хранения и получения данных в веб-хранилищах (localStorage и sessionStorage).
4. Можно ли обработать ответ от сервера одновременно и как текст, и как JSON?
да

5. В чем особенность асинхронных запросов?
асинхронный – действие выполняется в фоне (не в основном потоке), другими словами, таким образом, что оно не мешает пользователю взаимодействовать со страницей;

6. В чем преимущество AJAX-запросов перед старым способом работы с сервером через `<form action="имя скрипта на сервере">`?
-снижение трафика (из-за уменьшения объёма передаваемых данных между клиентом и сервером);
-уменьшение нагрузки на сервер (не нужно генерировать всю страницу, а только ту часть, которую нужно обновить);
-увеличение быстродействия и отзывчивости (нет необходимости в полной перезагрузки страницы, достаточно обновить содержимое только отдельных блоков);
-повышение интерактивности (с помощью AJAX можно сразу отображать результаты и сделать ресурс более удобным для пользования).
Взаимодействие с сервером через асинхронные запросы осуществляется посредством XHR или метода fetch().

7. Напишите, как будет выглядеть `fetch` для получения данных вашего пользователя на github? Адрес URL для запроса должен выглядеть так: 
fetch("https://api.github.com/users/Lisha9286")
            .then(response => (response.json()).then(user => console.log(user)))
            .catch(error => console.log(error));
8. Самостоятельно разберитесь, что такое SPA?
SPA (Single Page Application) – это web-приложение, размещенное на одной странице, которая для обеспечения работы загружает все javascript-файлы (модули, виджиты, контролы и т.д.) , а также файлы CSS вместе с загрузкой самой страницы.